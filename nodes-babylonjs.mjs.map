{"version":3,"sources":["nodes-babylonjs.js","_init.js","Scene/Create.js","Engine/Create/Canvas.js","Scene/Camera/Free.js","Scene/Light/Hemispheric.js","Scene/Mesh/Ground.js","Scene/Mesh/Sphere.js"],"names":["_classPrivateFieldLooseBase","receiver","privateKey","Object","prototype","hasOwnProperty","call","TypeError","id","_classPrivateFieldLooseKey","name","window","module","_class2","_class3","_class4","_class6","_class8","_class9","exports","globalThis","defineProperty","value","Blackprint","Environment","isBrowser","console","log","loadScope","url","hasInterface","hasDocs","_remoteModule","sf","loader","js","ordered","i","length","import","Context","createContext","EventSlot","slot","registerNode","Node","constructor","instance","super","this","renderLoop","partialUpdate","setInterface","title","update","IInput","Input","Output","ref","Engine","Scene","BABYLON","destroy","Pause","dispose","input","Render","Port","Trigger","iface","node","scene","output","Error","render","runRenderLoop","stopRenderLoop","description","Canvas","HTMLCanvasElement","registerInterface","IFace","EngineCreateCanvas","Interface","canvas","document","createElement","touchAction","width","height","imported","data","SceneCameraFreeData","init","on","Camera","FreeCamera","position","setTarget","Vector3","Zero","Attach","attachControl","once","detachControl","Position","_iface","_position","writable","val","replace","split","utils","setEnumerablePrototype","SceneLightHemisphericData","Light","HemisphericLight","intensity","Intensity","Default","Number","_iface2","_position2","x","y","z","Mesh","CreateGround","diameter","segments","CreateSphere"],"mappings":"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","file":"nodes-babylonjs.mjs","sourcesContent":[null,"// This script will run first, and then the other files\n// depends on blackprint.config.js configuration\n\nif(!window.Blackprint.Environment.isBrowser){\n\tconsole.log(\"@blackprint/nodes-babylon.js is only for browser, nodes will not be registered\");\n\treturn;\n}\n\n// Let the Blackprint Editor know the source URL where\n// the registerNode and registerInterface belongs to\nlet Blackprint = window.Blackprint.loadScope({\n\t// You can find the URL on Blackprint menu -> Modules\n\t// This will also be exported to JSON if this module's nodes is being used\n\turl: import.meta.url,\n\n\t// This will autoload (*.sf.mjs) and (*.sf.css) file for Browser\n\thasInterface: true,\n\n\t// This will autoload (*.docs.json) for Browser\n\thasDocs: true,\n});\n\n\n/* Parallely load dependencies from CDN here (optional) */\n//>> imports(...) =>  sf.loader.mjs(...) or [import(..), ..];\nlet _remoteModule = [\n\t\"https://cdn.jsdelivr.net/npm/babylonjs@5.0.0-beta.4/babylon.min.js\",\n\t\"https://cdn.jsdelivr.net/npm/babylonjs-loaders@5.0.0-beta.4/babylonjs.loaders.min.js\",\n];\n\nif(globalThis.sf != null)\n\tawait sf.loader.js(_remoteModule, {ordered: true});\nelse {\n\tfor (var i = 0; i < _remoteModule.length; i++)\n\t\tawait import(_remoteModule[i]);\n}\n\n\n// Global shared context (share to _init.sf)\nlet Context = Blackprint.createContext('Babylon.js');\n\n\n// This is needed to avoid duplicated event listener when using hot reload\n// Event listener that registered with same slot will be replaced\nContext.EventSlot = {slot: 'my-private-event-slot'};","/**\n * Create new scene where you can put light, camera, mesh, etc\n * @blackprint node\n * @summary Babylon.js Scene\n */\nBlackprint.registerNode('Babylon.js/Scene/Create',\nclass extends Blackprint.Node {\n\trenderLoop = null;\n\n\tstatic input = {\n\t\t/** Babylon's Engine */\n\t\tEngine: BABYLON.Engine,\n\t\t/** Begin rendering this scene into the engine */\n\t\tRender: Blackprint.Port.Trigger(function({ iface }){\n\t\t\tlet node = iface.node;\n\t\t\tif(node.renderLoop !== null) return;\n\n\t\t\tlet scene = node.output.Scene;\n\t\t\tif(scene === void 0) throw new Error(\"Scene was not found\");\n\n\t\t\tnode.renderLoop = ()=> { scene.render() };\n\t\t\tnode.input.Engine.runRenderLoop(node.renderLoop);\n\t\t}),\n\t\t/** Pause rendering this scene on the engine */\n\t\tPause: Blackprint.Port.Trigger(function({ iface }){\n\t\t\tlet node = iface.node;\n\t\t\tif(node.renderLoop === null) return;\n\n\t\t\tnode.input.Engine.stopRenderLoop(node.renderLoop);\n\t\t\tnode.renderLoop = null\n\t\t}),\n\t};\n\n\tstatic output = {\n\t\t/** This scene object */\n\t\tScene: BABYLON.Scene,\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\t\tthis.partialUpdate = true;\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = 'Scene';\n\t}\n\n\tupdate(){\n\t\tlet {IInput, Input, Output} = this.ref;\n\n\t\tif(IInput.Engine != null)\n\t\t\tOutput.Scene = new BABYLON.Scene(Input.Engine);\n\t}\n\n\tdestroy(){\n\t\tlet {Input, Output} = this.ref;\n\n\t\tif(Output.Scene != null){\n\t\t\tthis.ref.Input.Pause();\n\t\t\tthis.ref.Output.Scene.dispose();\n\t\t}\n\t}\n});","/**\n * Create new engine instance and the rendering canvas\n * @blackprint node\n * @summary Babylon.js Scene\n */\nBlackprint.registerNode('Babylon.js/Engine/Create/Canvas',\nclass EngineCreateCanvas extends Blackprint.Node {\n\tstatic output = {\n\t\t/** Babylon's Engine */\n\t\tEngine: BABYLON.Engine,\n\t\t/** Canvas object that being used for rendering scenes */\n\t\tCanvas: HTMLCanvasElement\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\n\t\tlet iface = this.setInterface('BPIC/Babylon.js/Engine/Create/Canvas');\n\t\tiface.title = 'Canvas';\n\t\tiface.description = 'Babylon.js canvas';\n\t}\n});\n\nBlackprint.registerInterface('BPIC/Babylon.js/Engine/Create/Canvas',\nContext.IFace.EngineCreateCanvas = class IMyTemplate extends Blackprint.Interface {\n\tconstructor(node){\n\t\tsuper(node);\n\t\tlet canvas = this.canvas = document.createElement('canvas');\n\t\tcanvas.touchAction = \"none\";\n\n\t\tcanvas.width = 360;\n\t\tcanvas.height = 240;\n\t}\n\n\timported(){\n\t\tlet Output = this.ref.Output;\n\n\t\tOutput.Canvas = this.canvas;\n\t\tOutput.Engine = new BABYLON.Engine(Output.Canvas, false);\n\t}\n\n\tdestroy(){\n\t\tthis.ref.Output.Engine.dispose();\n\t}\n});","Blackprint.registerNode(\"Babylon.js/Scene/Camera/Free\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tScene: BABYLON.Scene,\n\t\tPosition: BABYLON.Vector3,\n\t\tAttach: HTMLCanvasElement,\n\t};\n\n\tstatic output = { Camera: BABYLON.Camera };\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\t\tthis.partialUpdate = true;\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Free Camera\";\n\n\t\tiface.data = new SceneCameraFreeData(iface);\n\t}\n\n\tinit(){\n\t\tlet {IInput, Input, Output} = this.ref;\n\t\tIInput.Scene.on('connect', ()=> {\n\t\t\tlet data = this.iface.data;\n\n\t\t\tOutput.Camera?.dispose();\n\n\t\t\tlet camera = Output.Camera = new BABYLON.FreeCamera(\"FreeCamera\", data.position, Input.Scene);\n\t\t\tcamera.setTarget(BABYLON.Vector3.Zero());\n\n\t\t\tif(Input.Attach != null)\n\t\t\t\tOutput.Camera.attachControl(Input.Attach, true);\n\n\t\t\tIInput.Scene.once('disconnect', ()=> {\n\t\t\t\tOutput.Camera.dispose();\n\t\t\t});\n\t\t});\n\n\t\t// IInput.Position.on('connect', ()=> {});\n\t\tIInput.Attach.on('connect', ()=> {\n\t\t\tlet canvas = Input.Attach;\n\t\t\tif(Output.Camera != null)\n\t\t\t\tOutput.Camera.attachControl(canvas, true);\n\n\t\t\tIInput.Attach.once('disconnect', function(){\n\t\t\t\tOutput.Camera.detachControl(canvas);\n\t\t\t});\n\t\t});\n\t}\n\n\tdestroy(){\n\t\tlet {Input, Output} = this.ref;\n\t\tOutput.Camera?.dispose();\n\t}\n});\n\nclass SceneCameraFreeData {\n\t#iface = null;\n\t#position = '';\n\n\tconstructor(iface){\n\t\tthis.#iface = iface;\n\t\tthis.#position = new BABYLON.Vector3(0, 5, -10);\n\t}\n\n\tget position(){ return this.#position }\n\tset position(val){\n\t\tval = val.replace(/ /g, '').split(',');\n\t\tif(val.length !== 3) return;\n\n\t\tthis.#position = new BABYLON.Vector3(...val);\n\t}\n}\n\n// Using getter/setter will make the property not enumerable and Blackprint will skip that property when exporting\nBlackprint.utils.setEnumerablePrototype(SceneCameraFreeData, {\n\tposition: true,\n});","Blackprint.registerNode(\"Babylon.js/Scene/Light/Hemispheric\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tScene: BABYLON.Scene,\n\t\tPosition: BABYLON.Vector3, // ToDo\n\t\tIntensity: Blackprint.Port.Default(Number, 1),\n\t};\n\n\tstatic output = { Light: BABYLON.Light };\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\t\tthis.partialUpdate = true;\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Hemispheric Light\";\n\t\tiface.data = new SceneLightHemisphericData(iface);\n\t}\n\n\tinit(){\n\t\tlet {IInput, Input, Output} = this.ref;\n\t\tIInput.Scene.on('connect', ()=> {\n\t\t\tlet data = this.iface.data;\n\n\t\t\tOutput.Light?.dispose();\n\t\t\tOutput.Light = new BABYLON.HemisphericLight(\"HemisphericLight\", data.position, Input.Scene);\n\t\t\tOutput.Light.intensity = Input.Intensity;\n\n\t\t\tIInput.Scene.once('disconnect', ()=> {\n\t\t\t\tOutput.Light.dispose();\n\t\t\t});\n\t\t});\n\t}\n\n\tupdate(){\n\t\tlet {IInput, Input, Output} = this.ref;\n\n\t\tif(Output.Light != null)\n\t\t\tOutput.Light.intensity = Input.Intensity;\n\t}\n\n\tdestroy(){\n\t\tlet {Input, Output} = this.ref;\n\n\t\tOutput.Light?.dispose();\n\t}\n});\n\nclass SceneLightHemisphericData {\n\t#iface = null;\n\t#position = '';\n\t// intensity = 1;\n\n\tconstructor(iface){\n\t\tthis.#iface = iface;\n\t\tthis.#position = new BABYLON.Vector3(0, 5, -10);\n\t}\n\n\tget position(){ return this.#position }\n\tset position(val){\n\t\tval = val.replace(/ /g, '').split(',');\n\t\tif(val.length !== 3) return;\n\n\t\tthis.#position = new BABYLON.Vector3(...val);\n\t}\n}\n\n// Using getter/setter will make the property not enumerable and Blackprint will skip that property when exporting\nBlackprint.utils.setEnumerablePrototype(SceneLightHemisphericData, {\n\tposition: true,\n});","Blackprint.registerNode(\"Babylon.js/Scene/Mesh/Ground\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tScene: BABYLON.Scene,\n\t\t// Position: BABYLON.Vector3,\n\t};\n\n\tstatic output = {\n\t\tMesh: BABYLON.Mesh\n\t};\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\t\tthis.partialUpdate = true;\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Ground Mesh\";\n\n\t\tiface.data = {\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\tz: 0,\n\t\t\twidth: 6,\n\t\t\theight: 6,\n\t\t};\n\t}\n\n\tinit(){\n\t\tlet {IInput, Input, Output} = this.ref;\n\t\tIInput.Scene.on('connect', ()=> {\n\t\t\tlet data = this.iface.data;\n\n\t\t\tOutput.Mesh?.dispose();\n\t\t\tOutput.Mesh = new BABYLON.CreateGround(\"GroundMesh\", {\n\t\t\t\twidth: data.width,\n\t\t\t\theight: data.height,\n\t\t\t}, Input.Scene);\n\n\t\t\tIInput.Scene.once('disconnect', ()=> {\n\t\t\t\tOutput.Mesh.dispose();\n\t\t\t});\n\t\t});\n\t}\n\n\tdestroy(){\n\t\tlet {Input, Output} = this.ref;\n\n\t\tOutput.Mesh?.dispose();\n\t}\n});","Blackprint.registerNode(\"Babylon.js/Scene/Mesh/Sphere\",\nclass extends Blackprint.Node {\n\tstatic input = {\n\t\tScene: BABYLON.Scene,\n\t\t// Position: BABYLON.Vector3,\n\t};\n\n\tstatic output = { Mesh: BABYLON.Mesh };\n\n\tconstructor(instance){\n\t\tsuper(instance);\n\t\tthis.partialUpdate = true;\n\n\t\tlet iface = this.setInterface();\n\t\tiface.title = \"Sphere Mesh\";\n\n\t\tiface.data = {\n\t\t\tx: 0,\n\t\t\ty: 0,\n\t\t\tz: 0,\n\t\t\tdiameter: 1,\n\t\t\tsegments: 16,\n\t\t};\n\t}\n\n\tinit(){\n\t\tlet {IInput, Input, Output} = this.ref;\n\t\tIInput.Scene.on('connect', ()=> {\n\t\t\tlet data = this.iface.data;\n\n\t\t\tOutput.Mesh?.dispose();\n\t\t\tOutput.Mesh = new BABYLON.CreateSphere(\"SphereMesh\", {\n\t\t\t\tdiameter: data.diameter,\n\t\t\t\tsegments: data.segments,\n\t\t\t}, Input.Scene);\n\n\t\t\tIInput.Scene.once('disconnect', ()=> {\n\t\t\t\tOutput.Mesh.dispose();\n\t\t\t});\n\t\t});\n\t}\n\n\tdestroy(){\n\t\tlet {Input, Output} = this.ref;\n\t\tOutput.Mesh?.dispose();\n\t}\n});"]}