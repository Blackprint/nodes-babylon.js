{"version":3,"names":["window","templates","_$_","sf","dom","$","__tmplt","_sf_internal","body_map","_replace","path","html","h","this","remove","reinitViews","append","document","body","apply","arguments","prepend","Blackprint","loadScope","url","Context","getContext","Sketch","registerInterface","IFace","EngineCreateCanvas","init","el","canvas","insertBefore","$el"],"sources":["src/_init.sf","src/Engine/Create/Canvas.sf"],"sourcesContent":[".js will run first before .sf\n\n## js-global\n// This script will run first, and then the other .sf files\n// depends on blackprint.config.js configuration\n\n// Prepare stuff when the page is loading\n// maybe like loading our dependencies for the nodes\n\n/* If you have loaded any dependency from ./init.js can also wait from here\n * Warning: When using this, you must modify wrapped:'mjs' to wrapped:'async-mjs'\n * on blackprint.config.js, to avoid circular waiting (because this module also waiting)\n *\n * Info: imports.task() == sf.loader.task;\n */\n// await imports.task();\n\n\n// Because .js and .sf is separated\n// we also need to call LoadScope just like _init.js\nlet Blackprint = window.Blackprint.loadScope({\n\t// You can find the URL on Blackprint menu -> Modules\n\t// This will also be exported to JSON if this module's nodes is being used\n\turl: import.meta.url,\n});\n\n// Use sQuery\nlet $ = sf.$;\n\n// Global shared context (wait it to avoid race condition)\nlet Context = await Blackprint.getContext('Babylon.js');","## html\n<div class=\"node your-class\" style=\"transform: translate({{ x }}px, {{ y }}px)\">\n  <sf-template path=\"Blackprint/nodes/template/routes.sf\"></sf-template>\n  <sf-template path=\"Blackprint/nodes/template/header.sf\"></sf-template>\n\n  <div class=\"content\">\n    <div class=\"left-port\">\n      <sf-template path=\"Blackprint/nodes/template/input-port.sf\"></sf-template>\n    </div>\n\n    <div class=\"right-port\">\n      <sf-template path=\"Blackprint/nodes/template/output-port.sf\"></sf-template>\n    </div>\n  </div>\n\n  <sf-template path=\"Blackprint/nodes/template/other.sf\"></sf-template>\n</div>\n\n## scss-global\nbpic-babylon-js-engine-create-canvas { // Element name based on file path\n  canvas {\n    display: block;\n    border-bottom: 1px dashed white;\n    margin-bottom: 2px;\n  }\n}\n\n## js-global\nBlackprint.Sketch.registerInterface('BPIC/Babylon.js/Engine/Create/Canvas',\nclass EngineCreateCanvasIFace extends Context.IFace.EngineCreateCanvas {\n  // this == iface\n\n  init(el){\n    $(this.canvas).insertBefore(this.$el('.left-port')[0]);\n\n    // window.addEventListener(\"resize\", function () {\n    //   engine.resize();\n    // });\n  }\n});"],"mappings":"8HAEAA,EAAAC,YAAAD,EAAAC,UAAA,QAAAC,EAAAC,GAAAC,KAAAD,GAAAE,EAAAC,EAAAN,EAAAC,UAAAD,EAAAO,aAAAP,EAAAO,cAAA,CAAAC,SAAA,GAAAC,SAAAC,EAAAC,GAAA,IAAAC,EAAAV,EAAAS,GAAA,OAAAE,KAAAL,SAAAE,IAAAG,KAAAL,SAAAE,GAAAI,SAAAD,KAAAE,aAAAF,KAAAE,YAAAH,GAAAC,KAAAL,SAAAE,GAAAE,CAAA,EAAAI,OAAAN,EAAAC,GAAAT,EAAAe,SAAAC,MAAAF,OAAAH,KAAAJ,SAAAU,MAAAN,KAAAO,WAAA,EAAAC,QAAAX,EAAAC,GAAAT,EAAAe,SAAAC,MAAAG,QAAAR,KAAAJ,SAAAU,MAAAN,KAAAO,WAAA,GAiBA,IAAAE,EAAAtB,EAAAsB,WAAAC,UAAA,CAGAC,sBAIAnB,EAAAF,GAAAE,EAGAoB,QAAAH,EAAAI,WAAA,c,8jBCDAJ,EAAAK,OAAAC,kBAAA,uCACA,cAAAH,EAAAI,MAAAC,mBAGAC,KAAAC,GACA3B,EAAAQ,KAAAoB,QAAAC,aAAArB,KAAAsB,IAAA,iBAKA,G"}